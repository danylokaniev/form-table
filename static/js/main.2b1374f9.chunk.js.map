{"version":3,"sources":["other/types.js","other/workWithData.js","component/Modal/Modal.js","component/Form/Input.js","component/Form/Form.js","component/Table/TableHead.js","component/Table/TableBody.js","component/Table/Table.js","component/Modal/DeleteModal.js","App.js","serviceWorker.js","index.js"],"names":["inputValue","firstName","secondName","phone","gender","age","wasChanged","hasError","spanText","getCorrectPhone","phoneNumber","number","match","validate","name","value","reg","phoneLength","test","replace","length","Modal","showModal","setShowModal","modal","className","type","data-dismiss","aria-label","onClick","aria-hidden","React","memo","handleInput","children","isValid","onChange","placeholder","Form","props","event","target","setState","state","validateInput","handleSubmit","preventDefault","Object","values","includes","correctPerson","localStorage","setItem","JSON","stringify","updateData","onSubmit","this","autoComplete","keys","map","key","Input","Component","TableHead","setSortField","setShowDeleteModal","console","log","header","scope","TableBody","people","person","removeItem","DeleteModal","showDeleteModal","clear","App","useState","shouldUpdate","sortField","sortDirection","setSortDirection","sortedPeople","sign","sort","a","b","localeCompare","sortPeople","user","parse","getItem","push","getPeople","useEffect","href","newSortField","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAAaA,EAAa,CACxBC,UAAW,GACXC,WAAY,GACZC,MAAO,GACPC,OAAQ,GACRC,IAAK,GAGMC,EAAa,CACxBL,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,QAAQ,EACRC,KAAK,GAGME,EAAW,CACtBN,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,QAAQ,EACRC,KAAK,GAGMG,EAAW,CACtBP,UAAW,aACXC,WAAY,cACZC,MAAO,OACPC,OAAQ,SACRC,IAAK,OCgBA,SAASI,EAAiBC,GAC/B,IAAMC,EAASD,EAAYE,MAAM,OACjC,MAAM,GAAN,OAAUD,EAAO,GAAKA,EAAO,GAAK,IAClCA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAK,IACpCA,EAAO,GAAKA,EAAO,GAAK,IACxBA,EAAO,GAAKA,EAAO,IAuBNE,MAvEf,SAAmBC,EAAMC,GACvB,IAAIC,EAAM,GACNC,EAAc,EAElB,OAAQH,GACN,IAAK,YACL,IAAK,aAEH,QADAE,EAAM,iFACME,KAAKH,GACnB,IAAK,QAGH,OAFAC,EAAM,cACNC,EAAcF,EAAMI,QAAQ,MAAO,IAAIC,QAC/BJ,EAAIE,KAAKH,IAA0B,IAAhBE,EAC7B,IAAK,MAEH,QADAD,EAAM,YACME,KAAKH,KAAWA,EAAQ,MAAQA,EAAQ,EACtD,IAAK,SACH,QAASA,EACX,QACE,OAAO,ICkCEM,EApDD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACpBC,EAAQF,EAAY,sBAAwB,oBAClD,OACE,yBAAKG,UAAS,gBAAWD,IACvB,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,gCACA,4BAAQC,KAAK,SAASD,UAAU,QAAQE,eAAa,QAAQC,aAAW,QACtEC,QAAS,kBAAMN,GAAa,KAC5B,0BAAMO,cAAY,QAAlB,UAGJ,yBAAKL,UAAU,cACb,uBAAGA,UAAU,cAAb,mHAKA,4BAEE,sGAA2E,8BAG3E,uGAA4E,8BAG5E,yGAA8E,8BAG9E,qFAA0D,8BAG1D,sFAA2D,gCAI/D,yBAAKA,UAAU,gBACb,4BAAQC,KAAK,SAASD,UAAU,kBAAkBI,QAAS,kBAAMN,GAAa,KAA9E,c,4CCaGQ,MAAMC,MAnDF,SAAC,GAA4E,IAA1ElB,EAAyE,EAAzEA,KAAMmB,EAAmE,EAAnEA,YAAazB,EAAsD,EAAtDA,SAAUO,EAA4C,EAA5CA,MAAOmB,EAAqC,EAArCA,SAAU5B,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC1E4B,EAAU,GAOd,OANI7B,IAAeC,EACjB4B,EAAU,WACD7B,GAAcC,IACvB4B,EAAU,cAIV,yBAAKV,UAAU,oBAEb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAoBjB,IAGrC0B,EACC,4BACET,UAAS,wBAAmBU,GAC5BrB,KAAMA,EACNsB,SAAUH,EACVlB,MAAOA,GAENmB,GAGD,2BACER,KAAK,OACLD,UAAS,uBAAkBU,GAC3BrB,KAAMA,EACNsB,SAAUH,EACVlB,MAAOA,GAAS,GAChBsB,YAAa,oBC4FVC,E,kDAvHb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IAkBRN,YAAc,SAAAO,GACZ,IAAM1B,EAAO0B,EAAMC,OAAO3B,KACpBC,EAAQyB,EAAMC,OAAO1B,MAE3B,EAAK2B,UAAS,SAAAC,GAAK,MAAK,CACtB3C,WAAW,2BACN2C,EAAM3C,YADD,kBAEPc,EAAOC,IAEVT,WAAW,2BACNqC,EAAMrC,YADD,kBAEPQ,GAAO,IAEVP,SAAS,2BACJoC,EAAMpC,UADH,kBAELO,GAAQ8B,EAAc9B,EAAMC,UAlCf,EAuCpB8B,aAAe,SAACL,GAGd,GAFAA,EAAMM,iBAEFC,OAAOC,OAAO,EAAKL,MAAMpC,UAAU0C,UAAS,GAY9C,OAXA,EAAKV,MAAMhB,cAAa,QAExB,EAAKmB,SAAS,CACZpC,WAAY,CACVL,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,QAAQ,EACRC,KAAK,KAZa,MAkBU,EAAKsC,MAAM3C,WAArCC,EAlBgB,EAkBhBA,UAAWC,EAlBK,EAkBLA,WAEbgD,EAAa,2BACd,EAAKP,MAAM3C,YADG,IAEjBG,MAAOM,EAAgB,EAAKkC,MAAM3C,WAAWG,OAC7CE,KAAM,EAAKsC,MAAM3C,WAAWK,MAG9B8C,aAAaC,QAAb,UAAwBnD,EAAxB,YAAqCC,GAAcmD,KAAKC,UAAUJ,IAElE,EAAKX,MAAMgB,YAAW,GAEtB,EAAKb,SAAS,CACZ1C,WAAW,eACNA,GAELM,WAAW,eACNA,GAELC,SAAS,eACJA,MA1EP,EAAKoC,MAAQ,CACX3C,WAAW,eACNA,GAELM,WAAW,eACNA,GAELC,SAAS,eACJA,GAELC,SAAS,eACJA,IAdW,E,qDAkFT,IAAD,OACR,OACE,0BAAMgD,SAAUC,KAAKZ,aAAca,aAAa,MAAMjC,UAAU,QAG5DsB,OAAOY,KAAKF,KAAKd,MAAM3C,YAAY4D,KAAI,SAAAC,GAAG,OACxC,kBAACC,EAAD,CACED,IAAK,EAAKlB,MAAMnC,SAASqD,GACzB/C,KAAM+C,EACN5B,YAAa,EAAKA,YAClBzB,SAAU,EAAKmC,MAAMnC,SAASqD,GAC9B9C,MAAO,EAAK4B,MAAM3C,WAAW6D,GAC7BvD,WAAY,EAAKqC,MAAMrC,WAAWuD,GAClCtD,SAAU,EAAKoC,MAAMpC,SAASsD,IAErB,WAARA,GACC,oCACE,4BAAQ9C,MAAM,IAAd,qBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,eAMV,4BAAQW,KAAK,SAASD,UAAU,mBAAhC,Y,GA5GWM,IAAMgC,WCgCVC,EAlCG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,mBAEjC,OADAC,QAAQC,IAAIrB,OAAOY,KAAK3D,IAEtB,+BACE,4BAEI+C,OAAOY,KAAK3D,GAAY4D,KAAI,SAAAS,GAAM,OAChC,wBACEC,MAAM,MACN7C,UAAU,aACVoC,IAAKQ,GACL,4BACE3C,KAAK,SACLD,UAAU,4BACVI,QAAS,kBAAMoC,EAAaI,KAChB,UAAXA,EAAqB,QAAU7D,EAAS6D,QAKjD,4BACE,4BAAQ3C,KAAK,SAASD,UAAU,iBAAiBI,QAAS,kBAAMqC,GAAmB,KAAnF,aCgBKK,EAtCG,SAAC,GAA4B,IAA1BhB,EAAyB,EAAzBA,WAAYiB,EAAa,EAAbA,OAK/B,OACE,+BACGA,EAAOZ,KAAI,SAAAa,GAAM,OAChB,wBAAIZ,IAAG,UAAKY,EAAOtE,MAAZ,YAAqBsE,EAAOxE,YACjC,wBAAIqE,MAAM,OAAOG,EAAOxE,WACxB,4BAAKwE,EAAOvE,YACZ,oCAAUuE,EAAOtE,OACjB,4BAAKsE,EAAOrE,QACZ,4BAAKqE,EAAOpE,KACZ,wBAAIoB,UAAU,gBACZ,4BACEC,KAAK,SACLD,UAAU,gBACVI,QAAS,kBAjBC5B,EAiBkBwE,EAAOxE,UAjBdC,EAiByBuE,EAAOvE,WAhB/DiD,aAAauB,WAAb,UAA2BzE,EAA3B,YAAwCC,SACxCqD,GAAW,GAFQ,IAACtD,EAAWC,IAcvB,eCeG6B,MAAMC,MA5BP,SAAC,GAA8D,IAA5DwC,EAA2D,EAA3DA,OAAQP,EAAmD,EAAnDA,aAAcV,EAAqC,EAArCA,WAAYW,EAAyB,EAAzBA,mBACjD,OAASM,EAAOpD,OAIZ,6BACA,2BAAOK,UAAU,SACf,kBAAC,EAAD,CAAWwC,aAAcA,EAAcC,mBAAoBA,IAC3D,kBAAC,EAAD,CAAWX,WAAYA,EAAYiB,OAAQA,MAL7C,uBAAG/C,UAAU,gCAAb,gDCmCSkD,G,MAxCK,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,gBAAiBV,EAAqC,EAArCA,mBAAoBX,EAAiB,EAAjBA,WACpD/B,EAAQoD,EAAkB,sBAAwB,oBAMxD,OACE,yBAAKnD,UAAS,gBAAWD,IACvB,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,6BACA,4BAAQC,KAAK,SAASD,UAAU,QAAQE,eAAa,QAAQC,aAAW,QACtEC,QAAS,kBAAMqC,GAAmB,KAClC,0BAAMpC,cAAY,QAAlB,UAGJ,yBAAKL,UAAU,cACb,wBAAIA,UAAU,cAAd,sDAGF,yBAAKA,UAAU,gBACb,4BAAQC,KAAK,SAASD,UAAU,oBAAoBI,QAAS,kBAAMqC,GAAmB,KAAtF,UAEA,4BAAQxC,KAAK,SAASD,UAAU,iBAAiBI,QAAS,kBAtBlEsB,aAAa0B,QACbtB,GAAW,QACXW,GAAmB,KAoBX,gBCmBGY,MAvCf,WAAiB,IAAD,EACoBC,oBAAS,GAD7B,mBACPzD,EADO,KACIC,EADJ,OAEgCwD,oBAAS,GAFzC,mBAEPH,EAFO,KAEUV,EAFV,OAIqBa,oBAAS,GAJ9B,mBAIPC,EAJO,KAIOzB,EAJP,OAMoBwB,mBAAS,aAN7B,mBAMPE,EANO,KAMIhB,EANJ,OAO4Bc,oBAAS,GAPrC,mBAOPG,EAPO,KAOQC,EAPR,KASRX,ERoCD,SAAqBA,EAAQS,EAAWC,GAC7C,IAAKV,EAAOpD,OACV,MAAO,GAET,IAAMgE,EAAY,YAAOZ,GACrBa,GAAQ,EAIZ,OAHIH,IACFG,EAAO,UAEMD,EAAa,GAAGH,IAC7B,IAAK,SACHG,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUH,GAAQE,EAAEN,GAAaO,EAAEP,OACrD,MACF,QACEG,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUH,EAAOE,EAAEN,GAAWQ,cAAcD,EAAEP,OAGpE,OAAOG,EQrDQM,CRmBV,WAEL,IADA,IAAMlB,EAAS,GACf,MAAqBzB,OAAOY,KAAKR,cAAjC,eAAgD,CAA3C,IAAMsB,EAAM,KACTkB,EAAOtC,KAAKuC,MAAMzC,aAAa0C,QAAQpB,IAC7CD,EAAOsB,KAAKH,GAEd,OAAOnB,EQzBmBuB,GAAad,EAAWC,GAclD,OAJAc,qBAAU,WACRzC,GAAW,KACV,CAACyB,IAGF,oCACE,uBAAGvD,UAAU,oBAAb,eACe,IACb,uBAAGwE,KAAK,iDAAiDxE,UAAU,uBAAnE,sBAIF,kBAAC,EAAD,CAAMF,aAAcA,EAAcgC,WAAYA,IAC9C,kBAAC,EAAD,CAAOiB,OAAQA,EAAQP,aArBd,SAACiC,GACRA,IAAiBjB,EACnBhB,EAAaiC,GAEbf,GAAkBD,IAiByB3B,WAAYA,EAAYW,mBAAoBA,IACvF,kBAAC,EAAD,CAAO5C,UAAWA,EAAWC,aAAcA,IAC3C,kBAAC,EAAD,CAAaqD,gBAAiBA,EAAiBV,mBAAoBA,EAAoBX,WAAYA,MC9BrF4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1F,MACvB,2DCbN2F,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.2b1374f9.chunk.js","sourcesContent":["export const inputValue = {\r\n  firstName: '',\r\n  secondName: '',\r\n  phone: '',\r\n  gender: '',\r\n  age: 0\r\n}\r\n\r\nexport const wasChanged = {\r\n  firstName: false,\r\n  secondName: false,\r\n  phone: false,\r\n  gender: false,\r\n  age: false\r\n}\r\n\r\nexport const hasError = {\r\n  firstName: true,\r\n  secondName: true,\r\n  phone: true,\r\n  gender: true,\r\n  age: true\r\n}\r\n\r\nexport const spanText = {\r\n  firstName: 'First Name',\r\n  secondName: 'Second Name',\r\n  phone: '+380',\r\n  gender: 'Gender',\r\n  age: 'Age'\r\n}\r\n","import { inputValue } from './types'\r\n\r\nfunction validate (name, value) {\r\n  let reg = ''\r\n  let phoneLength = 0\r\n\r\n  switch (name) {\r\n    case 'firstName':\r\n    case 'secondName':\r\n      reg = /[^A-Za-zа-яА-ЯіІїЇєЄ\\s.-]+/g\r\n      return !reg.test(value)\r\n    case 'phone':\r\n      reg = /[^0-9\\s-]+/g\r\n      phoneLength = value.replace(/\\D/g, '').length\r\n      return !reg.test(value) && phoneLength === 9\r\n    case 'age':\r\n      reg = /[^0-9]+/g\r\n      return !reg.test(value) && +value < 120 && +value > 0\r\n    case 'gender':\r\n      return !!value\r\n    default:\r\n      return false\r\n  }\r\n}\r\n\r\nexport function hasSameType (person) {\r\n  // ?\r\n  for (const key in inputValue) {\r\n    if (Object.prototype.hasOwnProperty.call(person, key)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function getPeople () {\r\n  const people = []\r\n  for (const person of Object.keys(localStorage)) {\r\n    const user = JSON.parse(localStorage.getItem(person))\r\n    people.push(user)\r\n  }\r\n  return people\r\n}\r\n\r\nexport function getCorrectPhone (phoneNumber) {\r\n  const number = phoneNumber.match(/\\d/g)\r\n  return `${number[0] + number[1] + ' ' +\r\n  number[2] + number[3] + number[4] + ' ' +\r\n  number[5] + number[6] + ' ' +\r\n  number[7] + number[8]}`\r\n}\r\n\r\nexport function sortPeople (people, sortField, sortDirection) {\r\n  if (!people.length) {\r\n    return []\r\n  }\r\n  const sortedPeople = [...people]\r\n  let sign = -1\r\n  if (sortDirection) {\r\n    sign = 1\r\n  }\r\n  switch (typeof sortedPeople[0][sortField]) {\r\n    case 'number':\r\n      sortedPeople.sort((a, b) => sign * (a[sortField] - b[sortField]))\r\n      break\r\n    default:\r\n      sortedPeople.sort((a, b) => sign * a[sortField].localeCompare(b[sortField]))\r\n      break\r\n  }\r\n  return sortedPeople\r\n}\r\n\r\nexport default validate\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Modal = ({ showModal, setShowModal }) => {\r\n  const modal = showModal ? 'custom-modal-active' : 'custom-modal-none'\r\n  return (\r\n    <div className={`modal ${modal}`}>\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">Fill in all fields correctly</h5>\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n              onClick={() => setShowModal(false)}>\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <p className=\"modal-text\">This form is designed to add data to a table. To add a new field,\r\n              must be correct\r\n              filled in ALL fields. Namely:\r\n            </p>\r\n\r\n            <ul>\r\n\r\n              <li>First Name: all alphabetic characters are allowed, space, period, dash.<br/>\r\n              </li>\r\n\r\n              <li>Second Name: all alphabetic characters are allowed, space, period, dash.<br/>\r\n              </li>\r\n\r\n              <li>Phone: numbers, spaces, and dashes are allowed. The number of digits is 9.<br/>\r\n              </li>\r\n\r\n              <li>Age: only numbers are allowed. The maximum age is 120.<br/>\r\n              </li>\r\n\r\n              <li>Gender: You need to choose one of the proposed options.<br/></li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"btn btn-primary\" onClick={() => setShowModal(false)}>Clear</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nModal.propTypes = {\r\n  showModal: PropTypes.bool,\r\n  setShowModal: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst InputField = ({ name, handleInput, spanText, value, children, wasChanged, hasError }) => {\r\n  let isValid = ''\r\n  if (wasChanged && !hasError) {\r\n    isValid = 'is-valid'\r\n  } else if (wasChanged && hasError) {\r\n    isValid = 'is-invalid'\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n\r\n      <div className=\"input-group-prepend\">\r\n        <span className=\"input-group-text\">{spanText}</span>\r\n      </div>\r\n\r\n      {children ? (\r\n        <select\r\n          className={`custom-select ${isValid}`}\r\n          name={name}\r\n          onChange={handleInput}\r\n          value={value}\r\n        >\r\n          {children}\r\n        </select>)\r\n        : (\r\n          <input\r\n            type=\"text\"\r\n            className={`form-control ${isValid}`}\r\n            name={name}\r\n            onChange={handleInput}\r\n            value={value || ''}\r\n            placeholder={'Enter value'}\r\n          />\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nInputField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  spanText: PropTypes.string.isRequired,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]).isRequired,\r\n  handleInput: PropTypes.func.isRequired,\r\n  children: PropTypes.any,\r\n  wasChanged: PropTypes.bool,\r\n  hasError: PropTypes.bool\r\n}\r\n\r\nexport default React.memo(InputField)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from './Input'\r\nimport validateInput, { getCorrectPhone } from '../../other/workWithData'\r\nimport { inputValue, wasChanged, hasError, spanText } from '../../other/types'\r\n\r\nclass Form extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      inputValue: {\r\n        ...inputValue\r\n      },\r\n      wasChanged: {\r\n        ...wasChanged\r\n      },\r\n      hasError: {\r\n        ...hasError\r\n      },\r\n      spanText: {\r\n        ...spanText\r\n      }\r\n    }\r\n  }\r\n\r\n  handleInput = event => {\r\n    const name = event.target.name\r\n    const value = event.target.value\r\n\r\n    this.setState(state => ({\r\n      inputValue: {\r\n        ...state.inputValue,\r\n        [name]: value\r\n      },\r\n      wasChanged: {\r\n        ...state.wasChanged,\r\n        [name]: true\r\n      },\r\n      hasError: {\r\n        ...state.hasError,\r\n        [name]: !validateInput(name, value)\r\n      }\r\n    }))\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (Object.values(this.state.hasError).includes(true)) {\r\n      this.props.setShowModal(true)\r\n\r\n      this.setState({\r\n        wasChanged: {\r\n          firstName: true,\r\n          secondName: true,\r\n          phone: true,\r\n          gender: true,\r\n          age: true\r\n        }\r\n      })\r\n      return\r\n    }\r\n\r\n    const { firstName, secondName } = this.state.inputValue\r\n\r\n    const correctPerson = {\r\n      ...this.state.inputValue,\r\n      phone: getCorrectPhone(this.state.inputValue.phone),\r\n      age: +this.state.inputValue.age\r\n    }\r\n\r\n    localStorage.setItem(`${firstName} ${secondName}`, JSON.stringify(correctPerson))\r\n\r\n    this.props.updateData(true)\r\n\r\n    this.setState({\r\n      inputValue: {\r\n        ...inputValue\r\n      },\r\n      wasChanged: {\r\n        ...wasChanged\r\n      },\r\n      hasError: {\r\n        ...hasError\r\n      }\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} autoComplete=\"off\" className=\"form\">\r\n\r\n        {\r\n          Object.keys(this.state.inputValue).map(key => (\r\n            <Input\r\n              key={this.state.spanText[key]}\r\n              name={key}\r\n              handleInput={this.handleInput}\r\n              spanText={this.state.spanText[key]}\r\n              value={this.state.inputValue[key]}\r\n              wasChanged={this.state.wasChanged[key]}\r\n              hasError={this.state.hasError[key]}\r\n            >\r\n              {key === 'gender' && (\r\n                <>\r\n                  <option value=\"\">Select gender ...</option>\r\n                  <option value=\"male\">Male</option>\r\n                  <option value=\"female\">Female</option>\r\n                </>\r\n              )}\r\n            </Input>\r\n          ))\r\n        }\r\n        <button type=\"submit\" className=\"btn btn-primary\">Add</button>\r\n\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  setShowModal: PropTypes.func.isRequired,\r\n  updateData: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport { inputValue, spanText } from '../../other/types'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TableHead = ({ setSortField, setShowDeleteModal }) => {\r\n  console.log(Object.keys(inputValue))\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {\r\n          Object.keys(inputValue).map(header => (\r\n            <th\r\n              scope=\"col\"\r\n              className=\"field-name\"\r\n              key={header}>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-secondary\"\r\n                onClick={() => setSortField(header)}>\r\n                {header === 'phone' ? 'Phone' : spanText[header]}\r\n              </button>\r\n            </th>\r\n          ))\r\n        }\r\n        <th>\r\n          <button type=\"button\" className=\"btn btn-danger\" onClick={() => setShowDeleteModal(true)}>Clean\r\n          </button>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nTableHead.propTypes = {\r\n  setSortField: PropTypes.func.isRequired,\r\n  setShowDeleteModal: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TableHead\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TableBody = ({ updateData, people }) => {\r\n  const deletePerson = (firstName, secondName) => {\r\n    localStorage.removeItem(`${firstName} ${secondName}`)\r\n    updateData(true)\r\n  }\r\n  return (\r\n    <tbody>\r\n      {people.map(person => (\r\n        <tr key={`${person.phone} ${person.firstName}`}>\r\n          <th scope=\"row\">{person.firstName}</th>\r\n          <td>{person.secondName}</td>\r\n          <td>+380 {person.phone}</td>\r\n          <td>{person.gender}</td>\r\n          <td>{person.age}</td>\r\n          <td className=\"button-field\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light\"\r\n              onClick={() => deletePerson(person.firstName, person.secondName)}>&#215;\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nTableBody.propTypes = {\r\n  updateData: PropTypes.func,\r\n  people: PropTypes.arrayOf(PropTypes.shape({\r\n    firstName: PropTypes.string.isRequired,\r\n    secondName: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired,\r\n    gender: PropTypes.string.isRequired,\r\n    age: PropTypes.number.isRequired\r\n  }))\r\n}\r\n\r\nexport default TableBody\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TableHead from './TableHead'\r\nimport TableBody from './TableBody'\r\n\r\nconst Table = ({ people, setSortField, updateData, setShowDeleteModal }) => {\r\n  return (!people.length\r\n    ? (\r\n      <p className=\"text-center font-weight-bold\">To create a table, add at least one form.</p>\r\n    )\r\n    : <div>\r\n      <table className=\"table\">\r\n        <TableHead setSortField={setSortField} setShowDeleteModal={setShowDeleteModal}/>\r\n        <TableBody updateData={updateData} people={people}/>\r\n      </table>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nTable.propTypes = {\r\n  people: PropTypes.arrayOf(PropTypes.shape({\r\n    firstName: PropTypes.string.isRequired,\r\n    secondName: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired,\r\n    gender: PropTypes.string.isRequired,\r\n    age: PropTypes.number.isRequired\r\n  })),\r\n  setSortField: PropTypes.func.isRequired,\r\n  updateData: PropTypes.func.isRequired,\r\n  setShowDeleteModal: PropTypes.func.isRequired\r\n}\r\n\r\nexport default React.memo(Table)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DeleteModal = ({ showDeleteModal, setShowDeleteModal, updateData }) => {\r\n  const modal = showDeleteModal ? 'custom-modal-active' : 'custom-modal-none'\r\n  const resetTable = () => {\r\n    localStorage.clear()\r\n    updateData(true)\r\n    setShowDeleteModal(false)\r\n  }\r\n  return (\r\n    <div className={`modal ${modal}`}>\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">Dropping the entire table</h5>\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n              onClick={() => setShowDeleteModal(false)}>\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <h2 className=\"modal-text\">Are you sure you want to delete the entire table?</h2>\r\n          </div>\r\n\r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setShowDeleteModal(false)}>Cancel\r\n            </button>\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={() => resetTable()}>Delete</button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDeleteModal.propTypes = {\r\n  showDeleteModal: PropTypes.bool,\r\n  setShowDeleteModal: PropTypes.func.isRequired,\r\n  updateData: PropTypes.func.isRequired\r\n}\r\n\r\nexport default DeleteModal\r\n","import React, { useEffect, useState } from 'react'\nimport { getPeople, sortPeople } from './other/workWithData'\nimport Modal from './component/Modal/Modal'\nimport Form from './component/Form/Form'\nimport Table from './component/Table/Table'\nimport './styles/main.css'\nimport DeleteModal from './component/Modal/DeleteModal'\n\nfunction App () {\n  const [showModal, setShowModal] = useState(true)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n\n  const [shouldUpdate, updateData] = useState(false)\n\n  const [sortField, setSortField] = useState('firstName')\n  const [sortDirection, setSortDirection] = useState(true)\n\n  const people = sortPeople(getPeople(), sortField, sortDirection)\n\n  const sort = (newSortField) => {\n    if (newSortField !== sortField) {\n      setSortField(newSortField)\n    } else {\n      setSortDirection(!sortDirection)\n    }\n  }\n\n  useEffect(function () {\n    updateData(false)\n  }, [shouldUpdate])\n\n  return (\n    <>\n      <p className=\"lead text-center\">\n        Created by -{' '}\n        <a href=\"https://www.linkedin.com/in/danylo-kanievskyi/\" className=\"badge badge-primary\">\n          Danylo Kanievskyi\n        </a>\n      </p>\n      <Form setShowModal={setShowModal} updateData={updateData}/>\n      <Table people={people} setSortField={sort} updateData={updateData} setShowDeleteModal={setShowDeleteModal}/>\n      <Modal showModal={showModal} setShowModal={setShowModal}/>\n      <DeleteModal showDeleteModal={showDeleteModal} setShowDeleteModal={setShowDeleteModal} updateData={updateData}/>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}